{"version":3,"sources":["app/ModelClassifier.js","app/PredictionsListView.js","app/App.js","reportWebVitals.js","index.js"],"names":["MODEL_CLASSES","ModelClassifier","model","a","tf","this","console","log","img","grayscale","fromPixels","resizeNearestNeighbor","mean","toFloat","expandDims","reshape","predict","data","predictions","classNames","getClassNames","Array","from","map","p","i","name","probability","toLabel","sort","b","slice","PredictionsListView","props","state","items","item","buildItem","ListGroup","Item","Math","round","Number","EPSILON","ProgressBar","striped","variant","now","buildList","React","Component","App","modelClassifier","isModelLoaded","imageSrc","showImagePreview","onFileChange","bind","init","setState","event","file","target","files","reader","FileReader","url","readAsDataURL","onloadend","readerEvent","result","document","getElementById","Container","style","marginTop","Card","marginBottom","Body","display","alignItems","Spinner","animation","marginLeft","Header","Form","Group","controlId","className","Label","Control","type","onChange","Button","onClick","Row","Col","Image","id","src","rounded","width","height","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.882f5f76.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs';\n\nconst MODEL_CLASSES = [\n\t\"Atelectasis\",\n\t\"COVID-19\",\n\t\"Cardiomegaly\",\n\t\"Consolidation\",\n\t\"Edema\",\n\t\"Effusion\",\n\t\"Emphysema\",\n\t\"Infiltration\",\n\t\"Mass\",\n\t\"Nodule\",\n\t\"Pleural Thickening\",\n\t\"Pneumothorax\"\n];\n\nclass ModelClassifier {\n\t\n\tMODEL_CLASSES = [\n\t\t\"Atelectasis\",\n\t\t\"COVID-19\",\n\t\t\"Cardiomegaly\",\n\t\t\"Consolidation\",\n\t\t\"Edema\",\n\t\t\"Effusion\",\n\t\t\"Emphysema\",\n\t\t\"Infiltration\",\n\t\t\"Mass\",\n\t\t\"Nodule\",\n\t\t\"Pleural Thickening\",\n\t\t\"Pneumothorax\"\n\t];\n\n\tmodel = null;\n\n\tasync init() {\n\t\tthis.model = await tf.loadLayersModel('https://pneumonia-model.nyc3.digitaloceanspaces.com/model.json');\n\t\tconsole.log(\"Model loaded.\");\n\t}\n\n\tasync predict(img) {\n\t\tconst grayscale = tf.browser\n\t\t\t.fromPixels(img)\n\t\t\t.resizeNearestNeighbor([224, 224])\n\t\t\t.mean(2)\n\t\t\t.toFloat()\n\t\t\t.expandDims(-1)\n\t\t\t.reshape([1, 224, 224, 1]);\n\t\t\n\t\t// Classify the image.\n\t\tconst predictions = await this.model.predict(grayscale).data();\n\t\t// const predictions = await this.model.predict(grayscale);\n\t\t// console.log('Predictions');\n\t\t// console.log(predictions);\n\t\t\n\t\tconst classNames = this.getClassNames(predictions);\n\t\t// classNames.forEach(item => console.log(item.toLabel));\n\n\t\treturn classNames;\n\t}\n\t\n\tgetClassNames(predictions) {\n\t\treturn Array.from(predictions)\n\t\t\t.map(function (p, i) {\n\t\t\t\treturn {\n\t\t\t\t\tname: MODEL_CLASSES[i],\n\t\t\t\t\tprobability: (p * 100),\n\t\t\t\t\ttoLabel: MODEL_CLASSES[i] + \": \" + (p * 100) + \"%\",\n\t\t\t\t}\n\t\t\t}).sort(function (a, b) {\n\t\t\t\treturn b.probability - a.probability;\n\t\t\t}).slice(0, 3);\n\t}\n}\n\nclass ModelPrediction {\n\tname = '';\n\tprobability = 0.0;\n\t\n\tconstructor(name, probability) {\n\t\tthis.name = name;\n\t\tthis.probability = probability;\n\t}\n\t\n\ttoString(){\n\t\treturn this.name + \": \" + this.probability + \"%\";\n\t}\n}\n\nexport {ModelClassifier, ModelPrediction, MODEL_CLASSES};","import React from \"react\";\n\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\n\nclass PredictionsListView extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tpredictions: props.predictions,\n\t\t};\n\t}\n\n\tbuildList(items) {\n\t\treturn items.map((item) => this.buildItem(item));\n\t}\n\n\tbuildItem(item) {\n\t\tif (item.probability < 0.1 && item.probability > 0) {\n\t\t\titem.probability = 0.1;\n\t\t}\n\n\t\treturn (\n\t\t\t<ListGroup.Item key={item.name}>\n\t\t\t\t{item.name} - Probabilidade: { Math.round((item.probability + Number.EPSILON) * 100) / 100  } %\n\t\t\t\t<ProgressBar striped variant=\"success\" now={item.probability} />\n\t\t\t</ListGroup.Item>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<ListGroup>\n\t\t\t\t{this.buildList(this.state.predictions)}\n\t\t\t</ListGroup>\n\t\t);\n\t}\n}\n\nexport default PredictionsListView;","import \"./App.css\";\n\nimport React from \"react\";\n\nimport { Container, Card, Form, Spinner, Col, Row } from \"react-bootstrap\";\nimport Image from \"react-bootstrap/Image\";\nimport Button from \"react-bootstrap/Button\";\n\nimport {ModelClassifier} from \"./ModelClassifier\";\nimport PredictionsListView from \"./PredictionsListView\";\n\nclass App extends React.Component {\n  \n\tmodelClassifier = new ModelClassifier();\n\t\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tisModelLoaded: false,\n\t\t\timageSrc: \"\",\n\t\t\tshowImagePreview: false,\n\t\t\tpredictions: [],\n\t\t};\n\n\t\tthis.onFileChange = this.onFileChange.bind(this);\n\t\tthis.predict = this.predict.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.modelClassifier.init();\n\t\tthis.setState({isModelLoaded: true});\n\t}\n\n\tonFileChange(event) {\n\t\tvar file = event.target.files[0];\n\t\tvar reader = new FileReader();\n\t\tvar url = reader.readAsDataURL(file);\n\t\t\n\t\treader.onloadend = (readerEvent) => {\n\t\t\turl = readerEvent.target.result;\n\t\t\tthis.setState({\n\t\t\t\timageSrc: url,\n\t\t\t\tshowImagePreview: true\n\t\t\t});\n\t\t\t// console.log(url);\n\t\t};\n\t}\n\n\tasync predict() {\n\t\tconst img = document.getElementById('img-preview');\n\t\tconst predictions = await this.modelClassifier.predict(img);\n\t\tthis.setState({ predictions: predictions });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t<Container style={{marginTop: \"20px\"}} >\n\n\t\t\t{!this.state.isModelLoaded && (\n\t\t\t<Card style={{ marginTop: \"20px\", marginBottom: \"20px\" }}>\n\t\t\t\t<Card.Body style={{ display: \"inline-flex\", alignItems: \"center\" }}>\n\t\t\t\t<Spinner animation=\"border\"></Spinner>\n\t\t\t\t<span style={{ marginLeft: \"10px\" }}>\n\t\t\t\t\tCarregando o sistema...\n\t\t\t\t</span>\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t\t)}\n\n\t\t\t<Card>\n\t\t\t\t<Card.Header>\n\t\t\t\t\t<strong>Analisador de Raio-X</strong>\n\t\t\t\t</Card.Header>\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<Form.Group controlId=\"formFile\" className=\"mb-3\">\n\t\t\t\t\t\t<Form.Label>Escolha uma imagem de Raio-X.</Form.Label>\n\t\t\t\t\t\t<Form.Control type=\"file\" onChange={this.onFileChange} />\n\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t<Button \n\t\t\t\t\t\tvariant=\"primary\" \n\t\t\t\t\t\ttype=\"submit\" \n\t\t\t\t\t\tstyle={{marginBottom: \"20px\"}}\n\t\t\t\t\t\tonClick={this.predict}> Diagnosticar </Button>\n\n\t\t\t\t\t{this.state.showImagePreview && (\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\t\tid=\"img-preview\"\n\t\t\t\t\t\t\t\t\tsrc={this.state.imageSrc}\n\t\t\t\t\t\t\t\t\trounded\n\t\t\t\t\t\t\t\t\twidth=\"300\"\n\t\t\t\t\t\t\t\t\theight=\"300\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.state.predictions.length > 0 &&\n\t\t\t\t\t\t\t\t<PredictionsListView predictions={this.state.predictions} />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t)}\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}